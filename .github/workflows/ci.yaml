on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: CI

jobs:
  CI:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Spark 2.4.0 (R oldrel, openjdk8)'
            r: 'oldrel'
            env:
              SPARK_VERSION: '2.4.0'
              JAVA_VERSION: 'openjdk8'
          - name: 'Spark 2.4.0 (R release, openjdk8)'
            r: 'release'
            env:
              SPARK_VERSION: '2.4.0'
              JAVA_VERSION: 'openjdk8'
          - name: 'Spark 2.4.5 (R release, openjdk8)'
            r: 'release'
            env:
              SPARK_VERSION: '2.4.5'
              JAVA_VERSION: 'openjdk8'
          - name: 'Spark 3.0.0 (R release, openjdk8)'
            r: 'release'
            env:
              SPARK_VERSION: '3.0.0'
              JAVA_VERSION: 'openjdk8'
          - name: 'Spark 3.0.0 (R release, openjdk11)'
            r: 'release'
            env:
              SPARK_VERSION: '3.0.0'
              JAVA_URL: 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.1%2B13/OpenJDK11U-jdk_x64_linux_hotspot_11.0.1_13.tar.gz'
    env:
      ${{ matrix.env }}
    steps:
      - name: Mount tmpfs
        run: sudo mount -t tmpfs tmpfs /tmp
      - name: Delete pre-existing R binaries
        run: |
          for b in R Rscript
          do
            while [ -n "$(which "$b")" ]
            do
              sudo rm -v "$(which "$b")"
            done
          done
        shell: bash
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.r }}
      - name: Install Java
        id: install-java
        run: |
          sudo apt-get -y remove --purge default-jdk adoptopenjdk-11-hotspot || :

          if [[ ! -z "$JAVA_URL" ]]; then
            source ./.ci/install-jdk.sh --url $JAVA_URL
          else
            sudo apt-get -y install openjdk-8-jdk
            wget https://raw.githubusercontent.com/michaelklishin/jdk_switcher/master/jdk_switcher.sh
            . ./jdk_switcher.sh
            jdk_switcher use openjdk8;
          fi

          echo "${JAVA_HOME}"
          echo "::set-output name=JAVA_HOME::${JAVA_HOME}"
      - name: Query dependencies
        run: |
          print(R.version)
          install.packages("remotes")
          saveRDS(remotes::dev_package_deps(".", dependencies = TRUE), ".github/deps.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}
      - name: Get OS name
        id: os-name
        run: |
          # `os_name` will be like "Ubuntu-20.04.1-LTS"
          OS_NAME=$(lsb_release -ds | sed 's/\s/-/g')
          echo "::set-output name=os-name::$OS_NAME"
      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@master
        with:
          path: ${{ env.R_LIBS_USER }}
          key: sparklyr.flint-${{ steps.os-name.outputs.os-name }}-${{ hashFiles('.github/R-version') }}-${{ hashFiles('.github/deps.Rds') }}
          restore-keys: sparklyr.flint-${{ steps.os-name.outputs.os-name }}-${{ hashFiles('.github/R-version') }}
      - name: Cache Spark installations
        if: runner.os != 'Windows'
        uses: actions/cache@master
        with:
          path: ~/spark
          key: sparklyr.flint-apache-spark-${{ steps.os-name.outputs.os-name }}-${{ env.SPARK_VERSION }}
      - name: Install system dependencies
        run: source .ci/install_deps.sh
      - name: Install R dependencies
        run: source .ci/install_r_deps.sh
      - name: Build
        env:
          WARNINGS_ARE_ERRORS: 1
        run: R CMD build .
      - name: Check
        env:
          _R_CHECK_FORCE_SUGGESTS_: false
          WARNINGS_ARE_ERRORS: 1
        run: |
          R CMD check --no-build-vignettes --no-manual --no-tests sparklyr.flint*.tar.gz
          rm -f sparklyr.flint*.tar.gz
      - name: Install sparklyr.flint from source
        run: Rscript -e 'install.packages(".", repos = NULL, type = "source")'
      - name: Run tests
        run: |
          export SPARKLYR_LOG_FILE='/tmp/sparklyr.log'
          export JAVA_HOME="${{ steps.install-java.outputs.JAVA_HOME }}"

          cd tests
          NOT_CRAN='true' Rscript testthat.R
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: Worker logs
          path: /tmp/sparklyr.log
      - name: Dump worker logs on failure
        if: failure()
        run: cat /tmp/sparklyr.log
